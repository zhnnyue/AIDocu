/**
 * convertapi
 * Convert API lets you effortlessly convert file formats and types.
 *
 * OpenAPI spec version: v1
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.5
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/JobStatusResult', 'model/PptxSplitAdvancedRequest', 'model/PptxSplitAdvancedResponse', 'model/SplitBatchJobCreateResult', 'model/SplitDocxDocumentResult', 'model/SplitPdfResult', 'model/SplitPptxPresentationResult', 'model/SplitTextDocumentByLinesResult', 'model/SplitTextDocumentByStringResult', 'model/SplitXlsxWorksheetResult'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/JobStatusResult'), require('../model/PptxSplitAdvancedRequest'), require('../model/PptxSplitAdvancedResponse'), require('../model/SplitBatchJobCreateResult'), require('../model/SplitDocxDocumentResult'), require('../model/SplitPdfResult'), require('../model/SplitPptxPresentationResult'), require('../model/SplitTextDocumentByLinesResult'), require('../model/SplitTextDocumentByStringResult'), require('../model/SplitXlsxWorksheetResult'));
  } else {
    // Browser globals (root is window)
    if (!root.CloudmersiveConvertApiClient) {
      root.CloudmersiveConvertApiClient = {};
    }
    root.CloudmersiveConvertApiClient.SplitDocumentApi = factory(root.CloudmersiveConvertApiClient.ApiClient, root.CloudmersiveConvertApiClient.JobStatusResult, root.CloudmersiveConvertApiClient.PptxSplitAdvancedRequest, root.CloudmersiveConvertApiClient.PptxSplitAdvancedResponse, root.CloudmersiveConvertApiClient.SplitBatchJobCreateResult, root.CloudmersiveConvertApiClient.SplitDocxDocumentResult, root.CloudmersiveConvertApiClient.SplitPdfResult, root.CloudmersiveConvertApiClient.SplitPptxPresentationResult, root.CloudmersiveConvertApiClient.SplitTextDocumentByLinesResult, root.CloudmersiveConvertApiClient.SplitTextDocumentByStringResult, root.CloudmersiveConvertApiClient.SplitXlsxWorksheetResult);
  }
}(this, function(ApiClient, JobStatusResult, PptxSplitAdvancedRequest, PptxSplitAdvancedResponse, SplitBatchJobCreateResult, SplitDocxDocumentResult, SplitPdfResult, SplitPptxPresentationResult, SplitTextDocumentByLinesResult, SplitTextDocumentByStringResult, SplitXlsxWorksheetResult) {
  'use strict';

  /**
   * SplitDocument service.
   * @module api/SplitDocumentApi
   * @version 2.8.0
   */

  /**
   * Constructs a new SplitDocumentApi. 
   * @alias module:api/SplitDocumentApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the splitDocumentBatchJobCreate operation.
     * @callback module:api/SplitDocumentApi~splitDocumentBatchJobCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SplitBatchJobCreateResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Split a single Document into Separate Documents by Page as a Batch Job
     * Split a Document (PPTX supported), comprised of multiple pages into separate files, with each containing exactly one page.  This API is designed for large jobs that could take a long time to create and so runs as a batch job that returns a Job ID that you can use with the GetAsyncJobStatus API to check on the status of the Job and ultimately get the output result.  This API automatically detects the document type and then performs the split by using the document type-specific API needed to perform the split.  This API is only available for Cloudmersive Managed Instance and Private Cloud deployments.
     * @param {File} inputFile Input file to perform the operation on.
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.returnDocumentContents Set to true to return the contents of each presentation directly, set to false to only return URLs to each resulting presentation.  Default is true.
     * @param {module:api/SplitDocumentApi~splitDocumentBatchJobCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SplitBatchJobCreateResult}
     */
    this.splitDocumentBatchJobCreate = function(inputFile, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'inputFile' is set
      if (inputFile === undefined || inputFile === null) {
        throw new Error("Missing the required parameter 'inputFile' when calling splitDocumentBatchJobCreate");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'returnDocumentContents': opts['returnDocumentContents']
      };
      var formParams = {
        'inputFile': inputFile
      };

      var authNames = ['Apikey'];
      var contentTypes = ['multipart/form-data'];
      var accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      var returnType = SplitBatchJobCreateResult;

      return this.apiClient.callApi(
        '/convert/split/batch-job/create', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the splitDocumentDocx operation.
     * @callback module:api/SplitDocumentApi~splitDocumentDocxCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SplitDocxDocumentResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Split a single Word Document DOCX into Separate Documents by Page
     * Split a Word DOCX Document, comprised of multiple pages into separate Word DOCX document files, with each containing exactly one page.
     * @param {File} inputFile Input file to perform the operation on.
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.returnDocumentContents Set to true to return the contents of each Worksheet directly, set to false to only return URLs to each resulting document.  Default is true.
     * @param {module:api/SplitDocumentApi~splitDocumentDocxCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SplitDocxDocumentResult}
     */
    this.splitDocumentDocx = function(inputFile, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'inputFile' is set
      if (inputFile === undefined || inputFile === null) {
        throw new Error("Missing the required parameter 'inputFile' when calling splitDocumentDocx");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'returnDocumentContents': opts['returnDocumentContents']
      };
      var formParams = {
        'inputFile': inputFile
      };

      var authNames = ['Apikey'];
      var contentTypes = ['multipart/form-data'];
      var accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      var returnType = SplitDocxDocumentResult;

      return this.apiClient.callApi(
        '/convert/split/docx', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the splitDocumentGetAsyncJobStatus operation.
     * @callback module:api/SplitDocumentApi~splitDocumentGetAsyncJobStatusCallback
     * @param {String} error Error message, if any.
     * @param {module:model/JobStatusResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the status and result of a Split Document Batch Job
     * Returns the result of the Async Job - possible states can be STARTED or COMPLETED.  This API is only available for Cloudmersive Managed Instance and Private Cloud deployments.
     * @param {String} asyncJobID 
     * @param {module:api/SplitDocumentApi~splitDocumentGetAsyncJobStatusCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/JobStatusResult}
     */
    this.splitDocumentGetAsyncJobStatus = function(asyncJobID, callback) {
      var postBody = null;

      // verify the required parameter 'asyncJobID' is set
      if (asyncJobID === undefined || asyncJobID === null) {
        throw new Error("Missing the required parameter 'asyncJobID' when calling splitDocumentGetAsyncJobStatus");
      }


      var pathParams = {
      };
      var queryParams = {
        'AsyncJobID': asyncJobID,
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Apikey'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      var returnType = JobStatusResult;

      return this.apiClient.callApi(
        '/convert/split/batch-job/status', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the splitDocumentPdfByPage operation.
     * @callback module:api/SplitDocumentApi~splitDocumentPdfByPageCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SplitPdfResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Split a PDF file into separate PDF files, one per page
     * Split an input PDF file into separate pages, comprised of one PDF file per page.
     * @param {File} inputFile Input file to perform the operation on.
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.returnDocumentContents Set to true to directly return all of the document contents in the DocumentContents field; set to false to return contents as temporary URLs (more efficient for large operations).  Default is false.
     * @param {module:api/SplitDocumentApi~splitDocumentPdfByPageCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SplitPdfResult}
     */
    this.splitDocumentPdfByPage = function(inputFile, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'inputFile' is set
      if (inputFile === undefined || inputFile === null) {
        throw new Error("Missing the required parameter 'inputFile' when calling splitDocumentPdfByPage");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'returnDocumentContents': opts['returnDocumentContents']
      };
      var formParams = {
        'inputFile': inputFile
      };

      var authNames = ['Apikey'];
      var contentTypes = ['multipart/form-data'];
      var accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      var returnType = SplitPdfResult;

      return this.apiClient.callApi(
        '/convert/split/pdf', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the splitDocumentPptx operation.
     * @callback module:api/SplitDocumentApi~splitDocumentPptxCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SplitPptxPresentationResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Split a single PowerPoint Presentation PPTX into Separate Slides
     * Split an PowerPoint PPTX Presentation, comprised of multiple slides into separate PowerPoint PPTX presentation files, with each containing exactly one slide.
     * @param {File} inputFile Input file to perform the operation on.
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.returnDocumentContents Set to true to return the contents of each presentation directly, set to false to only return URLs to each resulting presentation.  Default is true.
     * @param {module:api/SplitDocumentApi~splitDocumentPptxCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SplitPptxPresentationResult}
     */
    this.splitDocumentPptx = function(inputFile, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'inputFile' is set
      if (inputFile === undefined || inputFile === null) {
        throw new Error("Missing the required parameter 'inputFile' when calling splitDocumentPptx");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'returnDocumentContents': opts['returnDocumentContents']
      };
      var formParams = {
        'inputFile': inputFile
      };

      var authNames = ['Apikey'];
      var contentTypes = ['multipart/form-data'];
      var accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      var returnType = SplitPptxPresentationResult;

      return this.apiClient.callApi(
        '/convert/split/pptx', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the splitDocumentPptxAdvanced operation.
     * @callback module:api/SplitDocumentApi~splitDocumentPptxAdvancedCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PptxSplitAdvancedResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Split a single PowerPoint Presentation PPTX into Separate Presentations
     * Split a PowerPoint PPTX Presentation, comprised of multiple slides into separate PowerPoint PPTX presentations of customizeable size.
     * @param {module:model/PptxSplitAdvancedRequest} request 
     * @param {module:api/SplitDocumentApi~splitDocumentPptxAdvancedCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PptxSplitAdvancedResponse}
     */
    this.splitDocumentPptxAdvanced = function(request, callback) {
      var postBody = request;

      // verify the required parameter 'request' is set
      if (request === undefined || request === null) {
        throw new Error("Missing the required parameter 'request' when calling splitDocumentPptxAdvanced");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Apikey'];
      var contentTypes = ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'];
      var accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      var returnType = PptxSplitAdvancedResponse;

      return this.apiClient.callApi(
        '/convert/split/pptx/advanced', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the splitDocumentTxtByLine operation.
     * @callback module:api/SplitDocumentApi~splitDocumentTxtByLineCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SplitTextDocumentByLinesResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Split a single Text file (txt) into lines
     * Split a Text (txt) Document by line, returning each line separately in order.  Supports multiple types of newlines.
     * @param {File} inputFile Input file to perform the operation on.
     * @param {module:api/SplitDocumentApi~splitDocumentTxtByLineCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SplitTextDocumentByLinesResult}
     */
    this.splitDocumentTxtByLine = function(inputFile, callback) {
      var postBody = null;

      // verify the required parameter 'inputFile' is set
      if (inputFile === undefined || inputFile === null) {
        throw new Error("Missing the required parameter 'inputFile' when calling splitDocumentTxtByLine");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
        'inputFile': inputFile
      };

      var authNames = ['Apikey'];
      var contentTypes = ['multipart/form-data'];
      var accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      var returnType = SplitTextDocumentByLinesResult;

      return this.apiClient.callApi(
        '/convert/split/txt/by-line', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the splitDocumentTxtByString operation.
     * @callback module:api/SplitDocumentApi~splitDocumentTxtByStringCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SplitTextDocumentByStringResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Split a single Text file (txt) by a string delimiter
     * Split a Text (txt) Document by a string delimiter, returning each component of the string as an array of strings.
     * @param {File} inputFile Input file to perform the operation on.
     * @param {String} splitDelimiter Required; String to split up the input file on
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.skipEmptyElements Optional; If true, empty elements will be skipped in the output
     * @param {module:api/SplitDocumentApi~splitDocumentTxtByStringCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SplitTextDocumentByStringResult}
     */
    this.splitDocumentTxtByString = function(inputFile, splitDelimiter, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'inputFile' is set
      if (inputFile === undefined || inputFile === null) {
        throw new Error("Missing the required parameter 'inputFile' when calling splitDocumentTxtByString");
      }

      // verify the required parameter 'splitDelimiter' is set
      if (splitDelimiter === undefined || splitDelimiter === null) {
        throw new Error("Missing the required parameter 'splitDelimiter' when calling splitDocumentTxtByString");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'splitDelimiter': splitDelimiter,
        'skipEmptyElements': opts['skipEmptyElements']
      };
      var formParams = {
        'inputFile': inputFile
      };

      var authNames = ['Apikey'];
      var contentTypes = ['multipart/form-data'];
      var accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      var returnType = SplitTextDocumentByStringResult;

      return this.apiClient.callApi(
        '/convert/split/txt/by-string', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the splitDocumentXlsx operation.
     * @callback module:api/SplitDocumentApi~splitDocumentXlsxCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SplitXlsxWorksheetResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Split a single Excel XLSX into Separate Worksheets
     * Split an Excel XLSX Spreadsheet, comprised of multiple Worksheets (or Tabs) into separate Excel XLSX spreadsheet files, with each containing exactly one Worksheet.
     * @param {File} inputFile Input file to perform the operation on.
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.returnDocumentContents Set to true to return the contents of each Worksheet directly, set to false to only return URLs to each resulting worksheet.  Default is true.
     * @param {module:api/SplitDocumentApi~splitDocumentXlsxCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SplitXlsxWorksheetResult}
     */
    this.splitDocumentXlsx = function(inputFile, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'inputFile' is set
      if (inputFile === undefined || inputFile === null) {
        throw new Error("Missing the required parameter 'inputFile' when calling splitDocumentXlsx");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'returnDocumentContents': opts['returnDocumentContents']
      };
      var formParams = {
        'inputFile': inputFile
      };

      var authNames = ['Apikey'];
      var contentTypes = ['multipart/form-data'];
      var accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      var returnType = SplitXlsxWorksheetResult;

      return this.apiClient.callApi(
        '/convert/split/xlsx', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
